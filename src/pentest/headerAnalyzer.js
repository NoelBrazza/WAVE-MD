const axios = require('axios');
const { performance } = require('perf_hooks');

async function analyzeHeaders(url) {
    const result = {};
    
    try {
        // Measure the response time
        const start = performance.now();
        const response = await axios.get(url);
        const end = performance.now();
        const responseTime = (end - start).toFixed(2) + ' ms';

        // Extract headers from the response
        const headers = response.headers;

        // Initialize header analysis
        result.responseTime = responseTime;
        result.headers = headers;

        // Detailed analysis
        result.analysis = analyzeSecurityHeaders(headers);
        
    } catch (error) {
        console.error('Error analyzing headers:', error);
        result.error = `Error analyzing headers: ${error.message}`;
    }

    return result;
}

function analyzeSecurityHeaders(headers) {
    const analysis = {};

    // Check for security-related headers
    analysis['Content-Security-Policy'] = headers['content-security-policy'] ? 'Present' : 'Missing';
    analysis['Strict-Transport-Security'] = headers['strict-transport-security'] ? 'Present' : 'Missing';
    analysis['X-Content-Type-Options'] = headers['x-content-type-options'] ? 'Present' : 'Missing';
    analysis['X-Frame-Options'] = headers['x-frame-options'] ? 'Present' : 'Missing';
    analysis['X-XSS-Protection'] = headers['x-xss-protection'] ? 'Present' : 'Missing';
    analysis['Referrer-Policy'] = headers['referrer-policy'] ? 'Present' : 'Missing';
    analysis['Feature-Policy'] = headers['feature-policy'] ? 'Present' : 'Missing';
    
    // Analyze common security header configurations
    analysis['Content-Security-Policy'] = headers['content-security-policy'] ? analyzeCSP(headers['content-security-policy']) : 'Not Configured';
    
    return analysis;
}

function analyzeCSP(cspHeader) {
    // Check if CSP allows inline scripts (which is often insecure)
    const cspDirectives = cspHeader.split(';');
    const allowsInlineScripts = cspDirectives.some(directive => directive.includes('script-src') && directive.includes("'unsafe-inline'"));
    return allowsInlineScripts ? 'Allows inline scripts (potentially insecure)' : 'Does not allow inline scripts';
}

module.exports = { analyzeHeaders };
