const { Client } = require('ssh2');
const { HttpsProxyAgent } = require('https-proxy-agent');
const axios = require('axios');

let sshClient = null;
let proxyAgent = null;

const startSSH = (sshConfig, localHost, localPort) => {
  return new Promise((resolve, reject) => {
    if (sshClient) {
      return resolve(' !SSH tunnel is already running!');
    }

    sshClient = new Client();
    sshClient.on('ready', () => {
      sshClient.forwardOut(
        localHost,
        localPort,
        sshConfig.host,
        sshConfig.port,
        (err, stream) => {
          if (err) {
            sshClient.end();
            sshClient = null;
            return reject(`Error setting up SSH tunnel: ${err.message}`);
          }

          proxyAgent = new HttpsProxyAgent({
            protocol: 'http:',
            host: '127.0.0.1',
            port: localPort,
            stream
          });

          configureAxios();
          resolve(`!SSH tunnel started through ${sshConfig.host}:${sshConfig.port}`);
        }
      );
    }).connect(sshConfig);
  });
};

const stopSSH = () => {
  if (!sshClient) {
    return 'No SSH tunnel is running!';
  }

  sshClient.end();
  sshClient = null;
  proxyAgent = null;
  configureAxios();

  return 'SSH tunnel stopped';
};

const configureAxios = () => {
  if (proxyAgent) {
    axios.defaults.httpsAgent = proxyAgent;
  } else {
    delete axios.defaults.httpsAgent;
  }
};

module.exports = {
  startSSH,
  stopSSH,
  configureAxios
};
