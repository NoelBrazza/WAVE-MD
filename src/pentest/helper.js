const helpMessages = {
  nmap: `Usage: .nmap <target>:<port-range>\nExample: .nmap 192.168.1.1:22-80\nDescription: Performs a port scan on the specified target and port range.`,
  sqlinject: `Usage: .sqlinject <url> <username> <password>\nExample: .sqlinject http://example.com/login admin admin\nDescription: Performs SQL Injection tests on the given URL with optional username and password for authentication.`,
  csrf: `Usage: .csrf <url> <method> <param1=value1,param2=value2,...> [username=username&password=password]\nExample: .csrf http://example.com/form POST param1=value1,param2=value2 admin=admin&password=admin\nDescription: Tests for CSRF vulnerabilities by sending crafted requests with and without CSRF tokens.`,
  cmdinjection: `Usage: .cmdinjection <url> <param1=value1,param2=value2,...>\nExample: .cmdinjection http://example.com/endpoint param1=value1,param2=value2\nDescription: Tests for Command Injection vulnerabilities by sending payloads in the specified parameters.`,
  authbypass: `Usage: .authbypass <url> <username> <password> <param1=value1,param2=value2,...>\nExample: .authbypass http://example.com/login admin admin param1=value1,param2=value2\nDescription: Tests for Authentication Bypass vulnerabilities using default credentials and user-provided credentials.`,
  xss: `Usage: .xss <url> <param1=value1,param2=value2,...>\nExample: .xss http://example.com/endpoint param1=value1,param2=value2\nDescription: Tests for Cross-Site Scripting (XSS) vulnerabilities by injecting payloads into the specified parameters.`,
  lfi: `Usage: .lfi <url> <param1=value1,param2=value2,...>\nExample: .lfi http://example.com/endpoint param1=value1,param2=value2\nDescription: Tests for Local File Inclusion (LFI) vulnerabilities by sending payloads in the specified parameters.`,
  rfi: `Usage: .rfi <url> <param1=value1,param2=value2,...>\nExample: .rfi http://example.com/endpoint param1=value1,param2=value2\nDescription: Tests for Remote File Inclusion (RFI) vulnerabilities by sending payloads in the specified parameters.`,
  exec: `Usage: .exec <command>\nExample: .exec m.reply("Hello World!")\nDescription: Executes arbitrary JavaScript code provided in the command.`,
};

const getHelpMessage = (command) => {
  return helpMessages[command] || `No help available for command: ${command}`;
};

module.exports = {
  getHelpMessage,
};
