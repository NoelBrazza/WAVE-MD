const axios = require('axios');

const testCSRF = async (url, method, data, authParams, csrfTokenName = '_csrf') => {
  const results = {};

  try {
    // Step 1: Get the initial page to retrieve CSRF token if any
    const response = await axios.get(url, { auth: authParams });
    let csrfToken = null;

    if (response.headers['set-cookie']) {
      const csrfCookie = response.headers['set-cookie'].find(cookie => cookie.includes(csrfTokenName));
      if (csrfCookie) {
        csrfToken = csrfCookie.split('=')[1].split(';')[0];
      }
    }

    // Step 2: Attempt to send the request without the CSRF token
    let payload = data;
    if (method === 'GET') {
      payload = { params: data };
    }

    const withoutCsrfResponse = await axios({ method, url, data: payload, auth: authParams });
    results['Without CSRF Token'] = {
      status: withoutCsrfResponse.status,
      message: 'Request succeeded without CSRF token'
    };

    // Step 3: Attempt to send the request with the CSRF token if found
    if (csrfToken) {
      if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
        payload = { ...data, [csrfTokenName]: csrfToken };
      } else {
        payload = { params: { ...data, [csrfTokenName]: csrfToken } };
      }

      const withCsrfResponse = await axios({ method, url, data: payload, auth: authParams });
      results['With CSRF Token'] = {
        status: withCsrfResponse.status,
        message: 'Request succeeded with CSRF token'
      };
    } else {
      results['With CSRF Token'] = {
        status: 'Not applicable',
        message: 'No CSRF token found in initial request'
      };
    }
  } catch (error) {
    results['Error'] = {
      status: error.response ? error.response.status : 'N/A',
      message: error.message
    };
  }

  return results;
};

module.exports = testCSRF;
